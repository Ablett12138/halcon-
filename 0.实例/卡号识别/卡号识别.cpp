dev_clear_window ()
  
read_image (Image1, '9-3_0.bmp')
read_image (Image2, '9-1_1.bmp')

get_image_size (Image1, Width, Height)
dev_close_window ()
dev_open_window (0, 0, Width, Height, 'black', WindowHandle)

dev_display (Image1)
gen_rectangle1 (ROI_1, 13.5, 106.232, 61.5, 355.273)
reduce_domain (Image1, ROI_1, ImageReduced1)
area_center (ROI_1, Area1, Row1, Column1)

dev_display (Image2)
gen_rectangle1 (ROI_2, 403.5, 133.5, 547.5, 188.5)
reduce_domain (Image2, ROI_2, ImageReduced2)
area_center (ROI_2, Area2, Row2, Column2)

create_shape_model (ImageReduced1, 'auto', 0, rad(360), 'auto', 'auto', 'use_polarity', 'auto', 'auto', ModelID1)
create_shape_model (ImageReduced2, 'auto', 0, rad(360), 'auto', 'auto', 'use_polarity', 'auto', 'auto', ModelID2)

ImageFiles := []
ImageFiles[0] := '9-1_1.bmp'
ImageFiles[1] := '9-3_0.bmp'
for Index := 0 to |ImageFiles| - 1 by 1
    read_image (Image, ImageFiles[Index])
    find_shape_model (Image, ModelID1, 0, rad(360), 0.5, 1, 0.5, 'least_squares', 0, 0.9, Row11, Column11, Angle11, Score1)
    find_shape_model (Image, ModelID2, 0, rad(360), 0.5, 1, 0.5, 'least_squares', 0, 0.9, Row21, Column21, Angle21, Score2)
    if(|Score1|==1)
        vector_angle_to_rigid (Row11, Column11, Angle11, Row1, Column1, rad(0), HomMat2D)
        affine_trans_image (Image, ImageAffinTrans1, HomMat2D, 'constant', 'false')
        dev_display (ImageAffinTrans1)
        rgb1_to_gray (ImageAffinTrans1, GrayImage1)        
        threshold (GrayImage1, Regions1, 9, 70)
        connection (Regions1, ConnectedRegions1)        
        select_shape (ConnectedRegions1, SelectedRegions1, ['area','row','column'], 'and', [81.66,234.92,66.58], [207.29,255.03,483.67])       
        union1 (SelectedRegions1, RegionUnion1)
        shape_trans (RegionUnion1, RegionTrans1, 'rectangle1')
        orientation_region (RegionTrans1, Phi1)
        area_center (RegionTrans1, Area12, Row12, Column12)
        vector_angle_to_rigid (Row12, Column12, Phi1, Row12, Column12, rad(0), HomMat2D2)
        reduce_domain (GrayImage1, RegionTrans1, ImageReduced1)
        rgb1_to_gray (ImageReduced1, GrayImage2)        
        threshold (GrayImage2, Regions2, 11, 104)
        connection (Regions2, ConnectedRegions1)
        sort_region (ConnectedRegions1, SortedRegions1, 'character', 'true', 'column')
        read_ocr_class_mlp ('Industrial_0-9_NoRej.omc', OCRHandle1)
        do_ocr_multi_class_mlp (SortedRegions1, GrayImage2, OCRHandle1, Class1, Confidence1)
        disp_message (WindowHandle, Class1, 'window', 0, 0, 'black', 'true')
    endif
    if(|Score2|==1)
        vector_angle_to_rigid (Row21, Column21, Angle21, Row2, Column2,rad(0), HomMat2D3)
        affine_trans_image (Image, ImageAffinTrans2, HomMat2D3, 'constant', 'false')
        dev_display (ImageAffinTrans2)        
        gen_rectangle1 (ROI_0, 449.5, 186.5, 467.5, 354.5)
        reduce_domain (ImageAffinTrans2, ROI_0, ImageReduced3)
        rgb1_to_gray (ImageReduced3, GrayImage3)        
        threshold (GrayImage3, Regions3, 10, 57)
        connection (Regions3, ConnectedRegions2) 
        partition_dynamic (ConnectedRegions2, Partitioned, 7, 0)        
        select_shape (ConnectedRegions2, SelectedRegions2, 'column', 'and', 184.76, 201.69)       
        select_shape (Partitioned, SelectedRegions3, 'column', 'and', 201.69, 343.13)       
        select_shape (Partitioned, SelectedRegions4, 'column', 'and', 344.12, 356.08)
        sort_region (SelectedRegions3, SortedRegions2, 'character', 'true', 'column')
        read_ocr_class_mlp ('Industrial_A-Z+_NoRej.omc', OCRHandle2)
        read_ocr_class_mlp ('Industrial_0-9_NoRej.omc', OCRHandle3)
        read_ocr_class_mlp ('Industrial_0-9A-Z_NoRej.omc', OCRHandle4)
        do_ocr_multi_class_mlp (SelectedRegions2, GrayImage3, OCRHandle2, Class2, Confidence5)
        do_ocr_multi_class_mlp (SortedRegions2, GrayImage3, OCRHandle3, Class3, Confidence6)
        do_ocr_multi_class_mlp (SelectedRegions4, GrayImage3, OCRHandle4, Class4, Confidence7)        
        disp_message (WindowHandle, [Class2,Class3,Class4], 'window', 0, 0, 'black', 'true')                    
    endif
endfor

